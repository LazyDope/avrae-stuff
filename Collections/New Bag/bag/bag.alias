<drac2>
# Load bag module
using(baglib="5f1ffcbf-3f59-4396-b402-1ca0f02d6bbb", bagcmds="7a4e5193-0eeb-4dae-a3ac-16786000e27b")
DEFAULT_COIN_RATES = baglib.DEFAULT_COIN_RATES
COIN_RATES = baglib.COIN_RATES
COIN_TYPES = baglib.COIN_TYPES
coinPouchName = baglib.coinPouchName
coinWeighs = baglib.coinWeighs

# define variables
modes = ["!", "?", "/", "@", "#", "$", ">", "-", "+", ".", "<", "%", "*", "^", "~", "&", "=", ";"]
args_list = bagcmds.fix_args(&ARGS&, modes, 1)
focus = None
text = bagcmds.default_text(color, ctx)
success = -1
bagsLoaded = baglib.LoadedBags()
openMode = None

# match the input to a subcommand
match args_list:
    case [("h" | "?") as help_cmd, *args]:
        args = "&*&".replace(help_cmd, "", 1)
        return f"help {ctx.alias} {args}"
    case [";", *_]:
        bagcmds.vars(text, ctx, name)
        return ' '.join(text)
    case [("d" | "/"), *args] | [input_name, ("d" | "/" | "delete"), *args]:
        success = bagcmds.delete(text, bagsLoaded, success, args, name, get("input_name"))
    case [("n" | "@"), *args] | [input_name, ("n" | "@" | "name"), *args]:
        success, focus = bagcmds.name(text, bagsLoaded, success, args, name, get("input_name"))
    case [("s" | "#"), *args] | [input_name, ("s" | "#" | "swap"), *args]:
        success, focus = bagcmds.swap(text, bagsLoaded, success, args, name, focus, get("input_name"))
    case [("c" | "$"), *args] | [input_name, ("c" | "$" | "create"), *args]:
        success, focus = bagcmds.create(text, bagsLoaded, success, args, name, focus, get("input_name"))
    case [("m" | ">"), input_name, *args] | [input_name, ("m" | ">" | "move"), *args]:
        success, focus = bagcmds.move_items(text, bagsLoaded, success, args, name, input_name)
    case [("r" | "-" | "a" | "+" | "b" | ".") as sign, *args] | [input_name, ("r" | "-" | "a" | "+" | "b" | "." | "remove" | "add" | "buy") as sign, *args]:
        success, focus = bagcmds.add_item(text, bagsLoaded, success, args, name, sign, get("input_name"))
    case [("p" | "<"), *args] | [input_name, ("p" | "<" | "pack"), *args]:
        success, focus = bagcmds.pack(text, bagsLoaded, success, args, name, focus, get("input_name"))
    case [("w" | "%"), *args] | [input_name, ("w" | "%" | "weight"), *args]:
        success = bagcmds.weight(text, success, args, name, get("input_name"))
    case [("i" | "*"), *args] | [input_name, ("i" | "*" | "ignore"), *args]:
        success = bagcmds.ignore(text, success, args, name, get("input_name"))
    case [("u" | "^"), *args] | [input_name, ("u" | "^" | "unignore"), *args]:
        success = bagcmds.unignore(text, success, args, name, get("input_name"))
    case [("t" | "~"), *args] | [input_name, ("t" | "~" | "track"), *args]:
        success = bagcmds.track(text, success, args, name, get("input_name"))
    case [("o" | "&"), *args] | [input_name, ("o" | "&" | "open"), *args]:
        success = bagcmds.open(text, success, args, name, get("input_name"))
    case [("e" | "="), *args] | [input_name, ("e" | "=" | "encumbrance"), *args]:
        success = bagcmds.encumbrance(text, success, args, name, get("input_name"))
    case [("l" | ":"), *args] | [input_name, ("l" | ":" | "limiter"), *args]:
        success = bagcmds.limiter(text, success, args, name, get("input_name"))
    case [("v" | "!"), *args] | [input_name, ("v" | "!" | "view"), *args] | [*args]:
        success, focus, openMode = bagcmds.view(text, bagsLoaded, success, args, name, focus, openMode, get("input_name"))

# reload bags if anything errored
if success == -1:
    bagsLoaded = baglib.load_bags()

bagcmds.finalize(text, bagsLoaded, focus, openMode)
character().set_cvar('bagSettings', dump_json(baglib.settings))
return ' '.join(text)
</drac2>
