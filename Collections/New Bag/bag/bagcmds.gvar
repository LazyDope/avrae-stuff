# Load bag module
using(baglib="5f1ffcbf-3f59-4396-b402-1ca0f02d6bbb")
DEFAULT_COIN_RATES = baglib.DEFAULT_COIN_RATES
COIN_RATES = baglib.COIN_RATES
COIN_TYPES = baglib.COIN_TYPES
coinPouchName = baglib.coinPouchName
coinWeighs = baglib.coinWeighs

# alias specific functions


def make_plural(word: str, quantity: int = 0) -> str:
    """
    Does what is says on the tin
    :args word: the word to modify
    :var quantity: quantity passthough
    """
    if quantity != 1:
        match word[-1]:
            case ("s" | "x"):
                return f"{word}es"
            case "y":
                return f"{word[:-1]}ies"
            case _:
                return f"{word}s"
    else:
        return word


def limit_length(input_values, limit: int = 100) -> str:
    string = ""
    match typeof(input_values):
        case 'SafeList':
            tlimit = limit-4
            max_index = len(input_values)-1
            string += "["
            for i, value in enumerate(input_values):
                value_string = ""
                if not i:
                    value_string = f"""{value if typeof(value) == 'int' else f'"{value}"'}"""
                else:
                    value_string = f""", {value if typeof(value) == 'int' else f'"{value}"'}"""
                if (len(string)+len(value_string)) > tlimit:
                    return string+"...]"
                else:
                    string += value_string
            string += "]"
        case 'SafeDict':
            tlimit = limit-4
            string += "{"
            max_index = len(input_values)-1
            for i, item in enumerate(input_values.items()):
                x, y = item
                if not i:
                    x_string = f'''"{x}":'''
                    y_string = f"""{y if typeof(y) == 'int' else f'"{y}"'}"""
                else:
                    x_string = f''', "{x}":'''
                    y_string = f"""{y if typeof(y) == 'int' else f'"{y}"'}"""
                if (len(string)+len(x_string)) > tlimit:
                    return string + "...}"
                elif (len(string)+len(f'''{x_string} {y_string}''')) > tlimit:
                    return string + x_string + "...}"
                else:
                    string += f"{x_string} {y_string}"
            string += "}"
        case 'str' | 'int' | 'float':
            tlimit = limit-3
            if len(str(input_values)) > limit:
                return str(input_values)[:tlimit]+"..."
            else:
                return input_values
    return string


def fix_args(args: SafeList, cmdlist, indexlimit=0) -> SafeList:
    """
    Fixes the args so that if a symbolic subcommand is placed
    within an argument, it can be separated, eg '+1' is treated as '+ 1'
    :arg args: list of args
    :arg cmdlist: a list or string of commands to check against
    :var indexlimit: the highest index that will be checked
    """
    new_args = []
    index = 0
    while index <= indexlimit and len(args) > index:
        arg = args[index]
        index += 1
        if arg[0] in cmdlist:
            new_args.append(arg[0])
            if len(arg) > 1:
                new_args.append(arg[2:] if arg[1] == " " else arg[1:])
            break
        else:
            new_args.append(arg)
    return new_args + args[index:]


def default_text(color, ctx):
    return ['embed', f'-color {color}', f"-footer ＂If your bags got deleted, check {ctx.prefix}help text2bag. For help with your bags, see !help {ctx.alias}.＂"]


def finalize(text, loaded_bags, focus=None, openMode=None):
    if (count := len(fields := loaded_bags.create_display(focus, openMode))) > 24:
        if "Total Weight Carried" in fields[-1]:
            text.extend(fields[:22])
            text.append(f"-f ＂Too Many Bags!|Lighten the load would you? You're carrying too many bags! {count-1} bags... that's a lot of bags! {count-25} too many in fact!＂")
            text.append(fields[-1])
        else:
            text.extend(fields[:23])
            text.append(f"-f ＂Too Many Bags!|Lighten the load would you? You're carrying too many bags! {count} bags... that's a lot of bags! {count-24} too many in fact!＂")
    else:
        text.extend(fields)


def vars(text, ctx, name):
    text.append(f"""-title ＂{name} needs help with their bags' settings＂""")
    text.append(f'''-desc ＂Bags! Make 'em, view 'em, toss 'em, swap 'em, name 'em, move 'em stuff 'em, dump 'em, fill 'em, weigh 'em, ignore 'em, track 'em, even configure 'em too!

    Variables with s/c/uvar before them note that they can be used with multiple variables, svar, cvar, and uvar in this case＂ -f ＂Coin Conversions|`{ctx.prefix}s/c/uvar coinRates`
    This variable defines what the conversion rates between coin types is. The types of coins are also derived from this.
    The coin with coin rate equal to 1 will be the default coin (the coin aliases would give you), or the first coin if there isn't one.
    __Current Value__
    `{limit_length(COIN_RATES)}`
    __Default__
    `{limit_length(DEFAULT_COIN_RATES)}`

    `{ctx.prefix}s/c/uvar coinPouchName`
    This variable defines what bag to look for when trying to modify coins.
    __Current Value__
    `{limit_length(coinPouchName)}`
    __Default__
    `Coin Pouch`

    `{ctx.prefix}s/c/uvar coinWeighs`
    This variable defines how much each coin will weigh.
    __Current Value__
    `{limit_length(coinWeighs)}`
    __Default__
    `0.02`＂
    -f ＂Homebrew|`{ctx.prefix}s/c/uvar extraPacks`
    This variable lets you define equipment packs that are not included.
    __Loaded Packs__
    `{limit_length([x[0] for x in baglib.hb_packs] or ["None"])}`
    __Default Packs__
    `{limit_length([x[0] for x in baglib.default_packs])}`

    `{ctx.prefix}s/c/uvar powerfulBuildRaces`
    This variable lets you define additional races which get the benefit of doubled carry capacity.
    __Loaded Races__
    `{limit_length(baglib.hb_pbRaces)}`
    __Default__
    `{dump_json(["bugbear","firbolg","goliath","orc"])}`＂

    -f ＂Storing Item Information|`{ctx.prefix}svar bag_custom_weights`
    This variable lets you define custom item weights, costs, and bundle sizes like is stored in your bagSettings cvar.
    __Loaded Items__
    `{limit_length(baglib.server_weights or ["None"])}`
    __Default__
    [GVar Here](https://avrae.io/dashboard/gvars?lookup=9eac80b1-1e1a-41ea-9a99-81a5f0f3be8e)

    `{ctx.prefix}cvar bagSettings`
    This variable stores changes you've made to your settings in the alias, best not to edit manually.
    __Current Value__
    `{limit_length(baglib.settings, 300)}`
    __Default__
    `{dump_json({"weightlessBags":["bag of holding", "handy haversack", "heward's handy haversack"], "customWeights":{}, "weightTracking":"Off", "openMode":"All", "encumbrance":"Off", "autoCoins":False})}`＂

    -f ＂Changing Item Emojis|`{ctx.prefix}s/cvar bagItemPrefixes`
    This variable lets you assign prefixes that come before the quantities for items. This variable adds the emojis before coins.
    If you want an emoji, just enter it normally, it will be converted when it's saved.
    __Loaded Prefixes__
    `{limit_length(baglib.ITEM_PREFIXES)}`
    __Default__
    `{limit_length(baglib.DEFAULT_COIN_EMOJIS)}`＂
    ''')
    text.append("-footer ＂!bag v4 by @Byronius#0001＂")


def delete(text, loaded_bags, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    if input_name:
        input_name = loaded_bags.delete_bag(input_name)
        success = loaded_bags.save_bags()
    title_bag = f"""their {input_name}""" if input_name else "a bag"
    text.append(f"""-title ＂{name}{[" has no bags after they get rid of "," gets rid of ", " fails to get rid of "][success]}{title_bag}＂""")
    return success


def name(text, loaded_bags, success, args, name, input_name=None):
    if not input_name:
        input_name = args.pop(0)
    new_name = ' '.join(args)
    if input_name and new_name:
        input_name, new_name = loaded_bags.rename_bag(input_name, new_name)
        success = loaded_bags.save_bags() if new_name else success
    title_bag = f"""their {input_name}""" if input_name else "a bag"
    text.append(f"""-title ＂{name}{[" fails to name their empty space",f" renames {title_bag} to {new_name}",f" fails to name {title_bag}"][success]}＂""")
    focus = loaded_bags.get_bag(new_name) if new_name and success == 1 else loaded_bags.get_bag(input_name)
    return success, focus


def swap(text, loaded_bags, success, args, name, focus=None, input_name=None):
    if not input_name:
        input_name = args.pop(0)
    position = int(args[0]) if args and args[0].isdecimal() else 0
    if input_name:
        input_name, position = loaded_bags.swap_pos(input_name, position)
        error = not input_name
        success = loaded_bags.save_bags(error)
        focus = loaded_bags.get_bag(input_name) if input_name else None
    title_bag = f"""their {input_name}""" if input_name else "a bag"
    text.append(f"""-title ＂{name}{[" has nothing to swap",f" swaps {title_bag} to position {position}",f" fails to swap {title_bag}"][success]}＂""")
    return success, focus


def create(text, loaded_bags, success, args, name, focus=None, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    bag = loaded_bags.new_bag(input_name) if input_name else loaded_bags.new_bag()
    success = loaded_bags.save_bags()
    focus = bag if success else focus
    title_bag = f"""their {bag[0]}""" if bag else f"their {input_name}"
    text.append(f"""-title ＂{name}{[" fails to create, so still has no bags",f" creates {title_bag}!",f" fails to create {title_bag}"][success]}＂""")
    return success, focus


def move_items(text, loaded_bags, success, args, name, input_name=None):
    if not input_name:
        input_name = args.pop(0)
    bag, dest_bag = (None, None)
    match args:
        case [quantity, item, *destination] if quantity.strip("+").isdecimal():
            quantity = max(int(quantity.strip("+")), 0)
        case [item, *destination]:
            quantity = 1
        case _:
            loaded_bags.error = True
    if not loaded_bags.error:
        destination = ' '.join(destination) or None

        if input_name == destination:
            loaded_bags.error = True
        if not loaded_bags.error:
            if input_name.lower() in ("coin purse" if loaded_bags.use_coin_purse() else coinPouchName.lower()):
                bag = loaded_bags.modify_coins(item, -quantity)
            else:
                bag, items = loaded_bags.modify_item(item, -quantity, input_name)
                item = items[0]
            if not loaded_bags.error:
                if (
                    destination
                    and destination.lower() in "coin purse"
                    and item.lower() in COIN_TYPES
                    and COIN_RATES == DEFAULT_COIN_RATES
                ):
                    dest_bag = loaded_bags.modify_coins(item.lower(), quantity)
                else:
                    dest_bag, items = (
                        loaded_bags.modify_item(
                            item,
                            quantity,
                            destination,
                            create_on_fail=True
                        )
                    )
                    item = items[0]
                loaded_bags.error |= bag == dest_bag
    success = loaded_bags.save_bags()
    focus = bag if loaded_bags.error else dest_bag
    title_bag = f"""their {bag[0]}""" if bag else "a bag"
    dest_title = dest_bag[0] if dest_bag else ""
    item_name = item if item.lower() in COIN_TYPES else make_plural(item, abs(get('quantity', 0)))
    text.append(f"""-title ＂{name}{[" fails to move anything, as they have no bags!",f" moves {quantity} {item_name} from {title_bag} to their {dest_title}",f" fails to move some {item_name} from {title_bag}"][success]}＂""")
    return success, focus


def add_item(text, loaded_bags, success, args, name, sign, input_name=None):
    buy, add, remove = sign in [".", "b", "buy"], sign in ["+", "a", "add"], sign in ["-", "r", "remove"]
    price = None
    coins = None
    match args:
        case [quantity, item, *price] if quantity.strip("+-").isdecimal():
            quantity = int(quantity.strip("+-"))
        case [item, *price]:
            quantity = 1
        case _:
            loaded_bags.error = True
    if not loaded_bags.error:
        if buy:
            cost = (
                ''.join(price)
                or typeof(baglib.weightDict.get(item.lower())) == 'SafeDict'
                and baglib.weightDict.get(item.lower(), {}).get("cost")
                or "0"
            )
            delta, parse_error = baglib.parsecoins(cost)
            loaded_bags.error |= parse_error
            bundle = (
                typeof(baglib.weightDict.get(item.lower())) == 'SafeDict'
                and baglib.weightDict.get(item.lower(), {}).get("bundle")
                or 1
            )
            quantity = ceil(float(quantity) / bundle) * bundle
            delta = {coin: -quantity * cost for coin, cost in delta.items()}
            coins = loaded_bags.modify_coins(delta=delta)
            input_name = input_name or "Shopping Bag"
            bag = None
        if not loaded_bags.error:
            quantity = -quantity if remove else quantity
            if (
                not input_name
                or input_name.lower() in (
                    "coin purse" if loaded_bags.use_coin_purse() else coinPouchName.lower()
                )
            ) and item.lower() in COIN_TYPES:
                bag = loaded_bags.modify_coins(item, quantity)
            else:
                bag, items = loaded_bags.modify_item(item, quantity, input_name, create_on_fail=True)
                item = items[0]
        success = loaded_bags.save_bags()
        item_name = item if item.lower() in COIN_TYPES else make_plural(item, abs(get('quantity', 0)))
    if buy:
        focus = coins if success == -1 else bag
        title_bag = f"""their {bag[0]}""" if bag else "a bag"
        cost_str = ''.join(f"{' + ' if i > 0 else ''}{abs(cost if cost % 1 else int(cost))}{coin}" for i, (coin, cost) in enumerate(delta.items()))
        text.append(f"""-title ＂{name}{[f" tries to buy {item_name} but has no bags!",f''' buys {abs(quantity)} {item_name} for {cost_str} and puts it in {title_bag}''',f" can't afford the {cost_str} to buy {item_name}"][success]}＂""")
    else:
        focus = bag if bag else focus
        title_bag = f"""their {bag[0]}""" if bag else "a bag"
        text.append(f"""-title ＂{name}{[f" tries to {'add' if add else 'remove'} {item_name} but has no bags!",f" {'adds' if add else 'removes'} {abs(quantity)} {item_name} {'to' if add else 'from'} {title_bag}",f" can't {'add' if add else 'remove'} {item_name}"][success]}＂""")
    return success, focus


def pack(text, loaded_bags, success, args, name, focus=None, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    pack = [pack for pack in baglib.packs if input_name == pack[0]]
    if not pack:
        pack = [pack for pack in baglib.packs if input_name in pack[0]]
    if not pack:
        pack = [pack for pack in baglib.packs if input_name.lower() in pack[0].lower()]
    if not pack:
        loaded_bags.error = True
    if not loaded_bags.error:
        pack = pack[0]
        pack_name = baglib.find_valid_name(loaded_bags, pack[0])
        loaded_bags.internal_bag_data.append([pack_name, pack[1]])
        focus = loaded_bags.get_bag(pack_name, exact_match=True)
    success = loaded_bags.save_bags()
    title_bag = f"""{pack_name}""" if focus else input_name
    text.append(f"""-title ＂{name}{[f" tries to add a {title_bag} but still has no bags!",f" adds a {title_bag}.",f" there is no pack called {title_bag}."][success]}＂""")
    return success, focus


def weight(text, success, args, name, input_name=None):
    if not input_name:
        input_name = args.pop(0)
    pargs = argparse(args)
    try:
        if 'weight' in pargs or 'cost' in pargs or 'bundle' in pargs:
            weight = pargs.last('weight')
            cost = pargs.last('cost')
            bundle = pargs.last('bundle')
        else:
            weight = len(args) > 0 and args[0]
            cost = len(args) > 1 and args[1]
            bundle = len(args) > 2 and args[2]
    except:
        weight = None
        cost = None
        bundle = None
    weight = float('.'.join([x for x in weight.split('.', 1) if x.isdecimal][:2]) or "0") or None if weight else None
    cost = cost if cost and any(coin in cost for coin in COIN_TYPES) else None
    bundle = int(bundle) if bundle and bundle.isdecimal() else None
    success = baglib.set_custom_weight(input_name, weight, cost, bundle)
    text.append(f"""-title ＂{name}{[f''' fails to update {input_name.title().replace("'S ", "'s ")}!''',f''' updates the values for {input_name.title().replace("'S ", "'s ")}!'''][success]}＂""")
    return success


def ignore(text, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
        success = 0
    if input_name and input_name.lower() not in baglib.settings.get('weightlessBags', baglib.default_settings.weightlessBags):
        baglib.settings.get('weightlessBags', baglib.default_settings.weightlessBags).append(input_name.lower())
        success = 1
    text.append(f"""-title ＂{name}{[" tries to ignore the weight of a weightless bag!",f''' deems a {input_name.title().replace("'S ", "'s ")} to have weightless contents!'''," fails to update their weightless settings!"][success]}＂""")
    return success


def unignore(text, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
        success = 0
    if input_name and input_name.lower() in baglib.settings.get('weightlessBags', baglib.default_settings.weightlessBags):
        baglib.settings.get('weightlessBags', baglib.default_settings.weightlessBags).remove(input_name.lower())
        success = 1
    text.append(f"""-title ＂{name}{[" tries to track the weight of an already tracked bag!",f''' deems a {input_name.title().replace("'S ", "'s ")} to no longer have weightless contents!'''," fails to update their weightless settings!"][success]}＂""")
    return success


def track(text, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    match input_name.lower():
        case ('on' | 'true'):
            baglib.settings['weightTracking'] = "On"
        case ('off' | 'false'):
            baglib.settings['weightTracking'] = "Off"
        case _:
            baglib.settings['weightTracking'] = "Off" if (
                baglib.settings.get('weightTracking', baglib.default_settings.weightTracking) == "On"
            ) else "On"
    success = 1
    text_dict = {'on': " is watching their weight!", 'off': " thinks weight is just a number!"}
    text.append(f"""-title ＂{name}{text_dict[baglib.settings.get('weightTracking', 'Off').lower()]}＂""")
    return success


def open(text, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    success = 1
    baglib.settings['openMode'] = input_name.title() if (
        input_name.lower() in baglib.open_modes
    ) else baglib.settings.get('openMode', 'All')
    text_dict = {
        'None': " doesn't want to see their full bags when they add or remove an item!",
        'One': " would like to see the bag they removed something from when they add or remove an item!",
        'All': " would like to know what's left in all of their bags when they add or remove an item!"
    }
    text.append(f"""-title ＂{name}{text_dict[baglib.settings.get('openMode', 'All').title()]}＂""")
    return success


def encumbrance(text, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    match input_name.lower():
        case ('on' | 'true'):
            baglib.settings['encumbrance'] = "On"
        case ('off' | 'false'):
            baglib.settings['encumbrance'] = "Off"
        case _:
            baglib.settings['encumbrance'] = "Off" if baglib.settings.get('encumbrance', baglib.default_settings.encumbrance) == "On" else "On"
    success = 1
    text_dict = {'on': " is feeling weighed down!", 'off': " wants to get this weight off their shoulders!"}
    text.append(f"""-title ＂{name}{text_dict[baglib.settings.get('encumbrance', 'Off').lower()]}＂""")
    return success


def limiter(text, success, args, name, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    success = 1
    baglib.settings['handleLongNames'] = input_name.lower() if (
        input_name.lower() in baglib.long_modes
    ) else baglib.settings.get('handleLongNames', 'newrow')
    text_dict = {
        'truncate': " doesn't want to see the full item name if its too long!",
        'newrow': " would like each item to always have its own line!",
        'newline': " doesn't mind if their items take up multiple lines!"
    }
    text.append(f"""-title ＂{name}{text_dict[baglib.settings.get('handleLongNames','newrow').lower()]}＂""")
    return success


def view(text, loaded_bags, success, args, name, focus=None, openMode=None, input_name=None):
    if not input_name:
        input_name = ' '.join(args)
    success = 1
    focus = loaded_bags.get_bag(input_name) if input_name else focus
    openMode = "One" if focus else 'All'
    title_bag = f"""their {focus[0]}""" if focus else "a bag"
    text.append(f"""-title ＂{name}{[f"'s bags",f" looks inside {title_bag}"][bool(focus)]}＂""")
    return success, focus, openMode
