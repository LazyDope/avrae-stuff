# Thanks for using DocGen
# The purpose of this module is to generate arguments for embeds from docstrings
# created by:
# Discord: Byronius#0001; GitHub: LazyDope; Ko-Fi: alazydope

def _get_docs(func: _Function|dict) -> str:
    if typeof(func) == '_Function':
        docs = func.doc
        f_name = func.name
    else:
        if typeof(func.doc) == '_Function':
            docs = func.doc.doc
        else:
            docs = func.doc if 'doc' in func else 'Unknown'
        f_name = func.name if 'name' in func else 'unknown'
    docs = docs.split('\n')
    args = []
    kwargs = []
    rtype = None
    for doc in docs:
        if doc.startswith(':') and len(doc.split(':',2)) >= 3:
            match (docsplit:=(defsplit:=doc.split(':', 2))[1].split())[0]:
                case 'arg'|'param':
                    args.append(f"{docsplit[2]}: {docsplit[1]}" if len(docsplit)>2 else args.append(docsplit[1]))
                case 'var'|'kwarg':
                    index = defsplit[2].lower().rfind("default:")
                    default = defsplit[2][index+8:].strip() if index is not -1 else err("Default must be provided for optional arg")
                    kwargs.append((f"{docsplit[2]}: {docsplit[1]}" if len(docsplit)>2 else docsplit[1]) + (f" = {default}" if default else ""))
                case 'rtype':
                    rtype = doc.split(':')[2].strip()
    if typeof(func) == '_Function':
        header = [f"""```py
{f_name}({', '.join(args+kwargs)}){f' -> {rtype}' if rtype else ''}```"""]
        if len(header[0].strip())>50:
            n='\n'
            header = [f"""```py
{f_name}(
    {f',{n}    '.join(args+kwargs)}
){f' -> {rtype}' if rtype else ''}```"""]
    else:
        header = [f"""```py
{f_name}```"""]
    docs = [f"""`{(search:=(x.lstrip(':').replace(':','`:',1)))[:None if (find:=search.rfind("default:")) is -1 else find]}""" if x.startswith(":") else x for x in docs]
    return '\n'.join(header+docs)

def get_embed(functions: list=[get_embed], args: list|str = '', subcmd: str='') -> str:
    """
    Create embed arguments for documentation.
    By default will show its own documentation.
    If you're looking at the GVAR you can use me as an example of how to format your docs.
    The first line is displayed as a summary
    Any line that starts with `:` are considered arg definitions and will be attempted to be formatted as such
    The first section inside of `::` is your arg definition
    Required args will start with `arg` or `param` while optional kwargs start with `kwarg` or `var`
    The middle is for type hints, generally you would use `|` to denote it accepts multiple types.
    The last part is for the name of your variable, this is most important for kwargs.
    After that you can put a description which will be displayed as is
    You can end your description with a `default:` tag, which will not be included, instead everything after it will be displayed as a default.
    :var list functions: a list of functions, custom dicts can also be used with a name value, along with either a doc or func value for the doc string default: [self.get_embed]
    :var list|str args: the args you want to pass through default: ''
    :var str subcmd: The subcommand used to show your docs, if any default: ''
    :return: the arguments for the embed command
    :rtype: str
    
    """
    newline = "\n"
    cmd = ctx.prefix + ctx.alias
    func_names = [x.name for x in functions]
    if typeof(args) == 'SafeList':
        args = ' '.join(args)
    elif typeof(args) == 'str':
        args = args.replace('"','').replace("'","")
    
    previous_funcs = load_yaml(get_uvar('docs_multiple_choice','[]'))
    if any([func_name not in func_names for func_name in previous_funcs]):
        previous_funcs = []
        delete_uvar('docs_multiple_choice')
        
    if len(functions) == 1:
        possible_func = functions
    elif previous_funcs:
        possible_func = [func for func in functions if any([func_name == func.name for func_name in previous_funcs])]
    else:
        possible_func = args and [func for func in functions if args in func.name]
    if args.isdecimal() and previous_funcs:
        index = max(int(args)-1,0)
        if len(previous_funcs)>index:
            func = functions[func_names.index(previous_funcs[index])]
            desc = _get_docs(func)
            delete_uvar('docs_multiple_choice')
            return f"-title ＂{ctx.author.display_name} decided on {func.name}＂ -desc ＂{desc}＂"
        else:
            desc = "That was not a valid option, try again\n" + '\n'.join([f"""{idx+1}. `{func.name}`: {func.doc.split(newline)[0]}""" for idx, func in enumerate(possible_func)])
            return f"-title ＂{ctx.author.display_name} couldn't make up their mind＂＂ -desc ＂{desc}＂"
    elif len(possible_func)>1:
        desc = f"**Multiple Matches Found**\nRerun `{cmd}{f' {subcmd}' if subcmd else ''} #` with the number that you want.\n" + '\n'.join([f"""{idx+1}. `{func.name}`: {func.doc.split(newline)[0]}""" for idx, func in enumerate(possible_func[:20])])
        set_uvar('docs_multiple_choice',dump_json([x.name for x in possible_func[:20]]))
        return f"-title ＂{ctx.author.display_name} couldn't make up their mind＂ -desc ＂{desc}＂"
    elif len(possible_func)==1:
        func = possible_func[0]
        desc = _get_docs(func)
        delete_uvar('docs_multiple_choice')
        return f"-title ＂{ctx.author.display_name} wants to know more about {func.name}＂ -desc ＂{desc}＂"
    else:
        desc = '\n'.join([f"""`{func.name}`: {func.doc.split(newline)[0]}""" for func in functions])
        delete_uvar('docs_multiple_choice')
        return f"-title ＂{ctx.author.display_name} wants to know what {ctx.alias}{f' {subcmd}' if subcmd else ''} has＂ -desc ＂{desc}＂"
